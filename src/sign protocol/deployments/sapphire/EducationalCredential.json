{
  "address": "0x789E5ECEdc1494DD6CB3CB70fAbF4a5797163AAa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spInstanceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "institution",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "course",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issueDate",
          "type": "uint256"
        }
      ],
      "name": "CredentialIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREDENTIAL_SCHEMA_ID",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getCredentials",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "courses",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "issueDates",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getLatestCredential",
      "outputs": [
        {
          "internalType": "bool",
          "name": "found",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "course",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "issueDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "course",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "issueDate",
          "type": "uint256"
        }
      ],
      "name": "issueCredential",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "setSPInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spInstance",
      "outputs": [
        {
          "internalType": "contract ISP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x83eb72cb35385d66d6b654995d94471b79de575478d8d155f33a33e1b35ae03b",
  "receipt": {
    "to": null,
    "from": "0xf1dd037c04c2973b10203259821B02e204ccaaA9",
    "contractAddress": "0x789E5ECEdc1494DD6CB3CB70fAbF4a5797163AAa",
    "transactionIndex": 0,
    "gasUsed": "1579138",
    "logsBloom": "0x
    "blockHash": "0x584ab08858799fdd7f526a3560a1dc20fb8128e24a7f7d36240b7e08b0a77b1e",
    "transactionHash": "0x83eb72cb35385d66d6b654995d94471b79de575478d8d155f33a33e1b35ae03b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7891627,
        "transactionHash": "0x83eb72cb35385d66d6b654995d94471b79de575478d8d155f33a33e1b35ae03b",
        "address": "0x789E5ECEdc1494DD6CB3CB70fAbF4a5797163AAa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1dd037c04c2973b10203259821b02e204ccaaa9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x584ab08858799fdd7f526a3560a1dc20fb8128e24a7f7d36240b7e08b0a77b1e"
      }
    ],
    "blockNumber": 7891627,
    "cumulativeGasUsed": "1579138",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d01670e16abe585f254612f4e9c509e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spInstanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"institution\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"course\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"}],\"name\":\"CredentialIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREDENTIAL_SCHEMA_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getCredentials\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"courses\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueDates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getLatestCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"course\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"course\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"}],\"name\":\"issueCredential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"setSPInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spInstance\",\"outputs\":[{\"internalType\":\"contract ISP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EducationalCredential.sol\":\"EducationalCredential\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/EducationalCredential.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISP } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\n\\ncontract EducationalCredential is Ownable {\\n    struct Credential {\\n        string course;\\n        uint256 issueDate;\\n    }\\n\\n    ISP public spInstance;\\n    uint64 public constant CREDENTIAL_SCHEMA_ID = 1; // Set your schema ID here\\n\\n    mapping(address => Credential[]) private credentials;\\n\\n    event CredentialIssued(address indexed institution, address indexed recipient, string course, uint256 issueDate);\\n\\n    constructor(address spInstanceAddress) Ownable(_msgSender()) {\\n        require(spInstanceAddress != address(0), \\\"Invalid SP instance address\\\");\\n        spInstance = ISP(spInstanceAddress);\\n    }\\n\\n    function setSPInstance(address instance) external onlyOwner {\\n        require(instance != address(0), \\\"Invalid SP instance address\\\");\\n        spInstance = ISP(instance);\\n    }\\n\\n    function issueCredential(\\n        address recipient,\\n        string memory course,\\n        uint256 issueDate\\n    ) external onlyOwner {\\n        require(recipient != address(0), \\\"Invalid recipient address\\\");\\n        require(bytes(course).length > 0, \\\"Course name cannot be empty\\\");\\n        require(issueDate <= block.timestamp, \\\"Issue date cannot be in the future\\\");\\n\\n        // Validate with schemaHook\\n        bool isValid = schemaHook(CREDENTIAL_SCHEMA_ID, abi.encode(course, issueDate), recipient);\\n        require(isValid, \\\"Data validation failed\\\");\\n\\n        credentials[recipient].push(Credential(course, issueDate));\\n        emit CredentialIssued(_msgSender(), recipient, course, issueDate);\\n    }\\n\\n    function getCredentials(address wallet) external view returns (string[] memory courses, uint256[] memory issueDates) {\\n        Credential[] memory userCredentials = credentials[wallet];\\n        uint256 credentialCount = userCredentials.length;\\n\\n        courses = new string[](credentialCount);\\n        issueDates = new uint256[](credentialCount);\\n\\n        for (uint256 i = 0; i < credentialCount; i++) {\\n            courses[i] = userCredentials[i].course;\\n            issueDates[i] = userCredentials[i].issueDate;\\n        }\\n\\n        return (courses, issueDates);\\n    }\\n\\n    function getLatestCredential(address wallet) external view returns (bool found, string memory course, uint256 issueDate) {\\n        Credential[] memory userCredentials = credentials[wallet];\\n        \\n        if (userCredentials.length == 0) {\\n            return (false, \\\"\\\", 0);\\n        }\\n\\n        Credential memory latestCredential = userCredentials[userCredentials.length - 1];\\n        return (true, latestCredential.course, latestCredential.issueDate);\\n    }\\n\\n    function schemaHook(\\n        uint64 schemaId,\\n        bytes memory data,\\n        address recipient\\n    ) internal view returns (bool) {\\n        require(schemaId == CREDENTIAL_SCHEMA_ID, \\\"Invalid schema ID\\\");\\n        require(recipient != address(0), \\\"Invalid recipient address\\\");\\n\\n        (string memory course, uint256 issueDate) = abi.decode(data, (string, uint256));\\n\\n        require(bytes(course).length > 0, \\\"Course name cannot be empty\\\");\\n        require(issueDate <= block.timestamp, \\\"Issue date cannot be in the future\\\");\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4a4fa1a05290d1b35542a6e702fe15007af0ad7d0fb1260377a3ebf5f632a9c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e2738038062001e278339818101604052810190620000379190620002be565b620000476200018860201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000bc5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000b3919062000301565b60405180910390fd5b620000cd816200019060201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000137906200037f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003a1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002868262000259565b9050919050565b620002988162000279565b8114620002a457600080fd5b50565b600081519050620002b8816200028d565b92915050565b600060208284031215620002d757620002d662000254565b5b6000620002e784828501620002a7565b91505092915050565b620002fb8162000279565b82525050565b6000602082019050620003186000830184620002f0565b92915050565b600082825260208201905092915050565b7f496e76616c696420535020696e7374616e636520616464726573730000000000600082015250565b600062000367601b836200031e565b915062000374826200032f565b602082019050919050565b600060208201905081810360008301526200039a8162000358565b9050919050565b611a7680620003b16000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101235780638e9841d0146101415780638e9d660f1461015d578063a8c5dc3314610179578063f2fde38b1461019757610093565b806304dd804614610098578063715018a6146100b65780637df5e551146100c057806384270608146100f2575b600080fd5b6100a06101b3565b6040516100ad9190610cea565b60405180910390f35b6100be6101b8565b005b6100da60048036038101906100d59190610d77565b6101cc565b6040516100e993929190610e68565b60405180910390f35b61010c60048036038101906101079190610d77565b610377565b60405161011a929190611070565b60405180910390f35b61012b6105eb565b60405161013891906110b6565b60405180910390f35b61015b60048036038101906101569190611232565b610614565b005b61017760048036038101906101729190610d77565b610896565b005b610181610951565b60405161018e9190611300565b60405180910390f35b6101b160048036038101906101ac9190610d77565b610977565b005b600181565b6101c06109fd565b6101ca6000610a84565b565b60006060600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561030057838290600052602060002090600202016040518060400160405290816000820180546102659061134a565b80601f01602080910402602001604051908101604052809291908181526020018280546102919061134a565b80156102de5780601f106102b3576101008083540402835291602001916102de565b820191906000526020600020905b8154815290600101906020018083116102c157829003601f168201915b5050505050815260200160018201548152505081526020019060010190610232565b505050509050600081510361032f57600080604051806020016040528060008152509093509350935050610370565b6000816001835161034091906113aa565b81518110610351576103506113de565b5b6020026020010151905060018160000151826020015194509450945050505b9193909250565b6060806000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104a9578382906000526020600020906002020160405180604001604052908160008201805461040e9061134a565b80601f016020809104026020016040519081016040528092919081815260200182805461043a9061134a565b80156104875780601f1061045c57610100808354040283529160200191610487565b820191906000526020600020905b81548152906001019060200180831161046a57829003601f168201915b50505050508152602001600182015481525050815260200190600101906103db565b5050505090506000815190508067ffffffffffffffff8111156104cf576104ce6110db565b5b60405190808252806020026020018201604052801561050257816020015b60608152602001906001900390816104ed5790505b5093508067ffffffffffffffff81111561051f5761051e6110db565b5b60405190808252806020026020018201604052801561054d5781602001602082028036833780820191505090505b50925060005b818110156105e35782818151811061056e5761056d6113de565b5b60200260200101516000015185828151811061058d5761058c6113de565b5b60200260200101819052508281815181106105ab576105aa6113de565b5b6020026020010151602001518482815181106105ca576105c96113de565b5b6020026020010181815250508080600101915050610553565b505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61061c6109fd565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290611459565b60405180910390fd5b60008251116106cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c6906114c5565b60405180910390fd5b42811115610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990611557565b60405180910390fd5b60006107416001848460405160200161072c929190611577565b60405160208183030381529060405286610b48565b905080610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a906115f3565b60405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405280858152602001848152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161081591906117b5565b506020820151816001015550508373ffffffffffffffffffffffffffffffffffffffff16610841610cbf565b73ffffffffffffffffffffffffffffffffffffffff167f3cdce538b6db111fcf97c8cdfc0f65dcd4c7eaeea28abf410f46ad76daed828b8585604051610888929190611577565b60405180910390a350505050565b61089e6109fd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361090d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610904906118d3565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61097f6109fd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109f15760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109e891906110b6565b60405180910390fd5b6109fa81610a84565b50565b610a05610cbf565b73ffffffffffffffffffffffffffffffffffffffff16610a236105eb565b73ffffffffffffffffffffffffffffffffffffffff1614610a8257610a46610cbf565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a7991906110b6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600167ffffffffffffffff168467ffffffffffffffff1614610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b989061193f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611459565b60405180910390fd5b60008084806020019051810190610c2791906119e4565b915091506000825111610c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c66906114c5565b60405180910390fd5b42811115610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca990611557565b60405180910390fd5b6001925050509392505050565b600033905090565b600067ffffffffffffffff82169050919050565b610ce481610cc7565b82525050565b6000602082019050610cff6000830184610cdb565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d4482610d19565b9050919050565b610d5481610d39565b8114610d5f57600080fd5b50565b600081359050610d7181610d4b565b92915050565b600060208284031215610d8d57610d8c610d0f565b5b6000610d9b84828501610d62565b91505092915050565b60008115159050919050565b610db981610da4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610df9578082015181840152602081019050610dde565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e2182610dbf565b610e2b8185610dca565b9350610e3b818560208601610ddb565b610e4481610e05565b840191505092915050565b6000819050919050565b610e6281610e4f565b82525050565b6000606082019050610e7d6000830186610db0565b8181036020830152610e8f8185610e16565b9050610e9e6040830184610e59565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610eee82610dbf565b610ef88185610ed2565b9350610f08818560208601610ddb565b610f1181610e05565b840191505092915050565b6000610f288383610ee3565b905092915050565b6000602082019050919050565b6000610f4882610ea6565b610f528185610eb1565b935083602082028501610f6485610ec2565b8060005b85811015610fa05784840389528151610f818582610f1c565b9450610f8c83610f30565b925060208a01995050600181019050610f68565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610fe781610e4f565b82525050565b6000610ff98383610fde565b60208301905092915050565b6000602082019050919050565b600061101d82610fb2565b6110278185610fbd565b935061103283610fce565b8060005b8381101561106357815161104a8882610fed565b975061105583611005565b925050600181019050611036565b5085935050505092915050565b6000604082019050818103600083015261108a8185610f3d565b9050818103602083015261109e8184611012565b90509392505050565b6110b081610d39565b82525050565b60006020820190506110cb60008301846110a7565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61111382610e05565b810181811067ffffffffffffffff82111715611132576111316110db565b5b80604052505050565b6000611145610d05565b9050611151828261110a565b919050565b600067ffffffffffffffff821115611171576111706110db565b5b61117a82610e05565b9050602081019050919050565b82818337600083830152505050565b60006111a96111a484611156565b61113b565b9050828152602081018484840111156111c5576111c46110d6565b5b6111d0848285611187565b509392505050565b600082601f8301126111ed576111ec6110d1565b5b81356111fd848260208601611196565b91505092915050565b61120f81610e4f565b811461121a57600080fd5b50565b60008135905061122c81611206565b92915050565b60008060006060848603121561124b5761124a610d0f565b5b600061125986828701610d62565b935050602084013567ffffffffffffffff81111561127a57611279610d14565b5b611286868287016111d8565b92505060406112978682870161121d565b9150509250925092565b6000819050919050565b60006112c66112c16112bc84610d19565b6112a1565b610d19565b9050919050565b60006112d8826112ab565b9050919050565b60006112ea826112cd565b9050919050565b6112fa816112df565b82525050565b600060208201905061131560008301846112f1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061136257607f821691505b6020821081036113755761137461131b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b582610e4f565b91506113c083610e4f565b92508282039050818111156113d8576113d761137b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e76616c696420726563697069656e74206164647265737300000000000000600082015250565b6000611443601983610dca565b915061144e8261140d565b602082019050919050565b6000602082019050818103600083015261147281611436565b9050919050565b7f436f75727365206e616d652063616e6e6f7420626520656d7074790000000000600082015250565b60006114af601b83610dca565b91506114ba82611479565b602082019050919050565b600060208201905081810360008301526114de816114a2565b9050919050565b7f497373756520646174652063616e6e6f7420626520696e20746865206675747560008201527f7265000000000000000000000000000000000000000000000000000000000000602082015250565b6000611541602283610dca565b915061154c826114e5565b604082019050919050565b6000602082019050818103600083015261157081611534565b9050919050565b600060408201905081810360008301526115918185610e16565b90506115a06020830184610e59565b9392505050565b7f446174612076616c69646174696f6e206661696c656400000000000000000000600082015250565b60006115dd601683610dca565b91506115e8826115a7565b602082019050919050565b6000602082019050818103600083015261160c816115d0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116757fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611638565b61167f8683611638565b95508019841693508086168417925050509392505050565b60006116b26116ad6116a884610e4f565b6112a1565b610e4f565b9050919050565b6000819050919050565b6116cc83611697565b6116e06116d8826116b9565b848454611645565b825550505050565b600090565b6116f56116e8565b6117008184846116c3565b505050565b5b81811015611724576117196000826116ed565b600181019050611706565b5050565b601f8211156117695761173a81611613565b61174384611628565b81016020851015611752578190505b61176661175e85611628565b830182611705565b50505b505050565b600082821c905092915050565b600061178c6000198460080261176e565b1980831691505092915050565b60006117a5838361177b565b9150826002028217905092915050565b6117be82610dbf565b67ffffffffffffffff8111156117d7576117d66110db565b5b6117e1825461134a565b6117ec828285611728565b600060209050601f83116001811461181f576000841561180d578287015190505b6118178582611799565b86555061187f565b601f19841661182d86611613565b60005b8281101561185557848901518255600182019150602085019450602081019050611830565b86831015611872578489015161186e601f89168261177b565b8355505b6001600288020188555050505b505050505050565b7f496e76616c696420535020696e7374616e636520616464726573730000000000600082015250565b60006118bd601b83610dca565b91506118c882611887565b602082019050919050565b600060208201905081810360008301526118ec816118b0565b9050919050565b7f496e76616c696420736368656d61204944000000000000000000000000000000600082015250565b6000611929601183610dca565b9150611934826118f3565b602082019050919050565b600060208201905081810360008301526119588161191c565b9050919050565b600061197261196d84611156565b61113b565b90508281526020810184848401111561198e5761198d6110d6565b5b611999848285610ddb565b509392505050565b600082601f8301126119b6576119b56110d1565b5b81516119c684826020860161195f565b91505092915050565b6000815190506119de81611206565b92915050565b600080604083850312156119fb576119fa610d0f565b5b600083015167ffffffffffffffff811115611a1957611a18610d14565b5b611a25858286016119a1565b9250506020611a36858286016119cf565b915050925092905056fea2646970667358221220bae6a4f63e0e60c32e240c8c9dd48e739d3fc9b63aee871ed5938c0807c7ea2164736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101235780638e9841d0146101415780638e9d660f1461015d578063a8c5dc3314610179578063f2fde38b1461019757610093565b806304dd804614610098578063715018a6146100b65780637df5e551146100c057806384270608146100f2575b600080fd5b6100a06101b3565b6040516100ad9190610cea565b60405180910390f35b6100be6101b8565b005b6100da60048036038101906100d59190610d77565b6101cc565b6040516100e993929190610e68565b60405180910390f35b61010c60048036038101906101079190610d77565b610377565b60405161011a929190611070565b60405180910390f35b61012b6105eb565b60405161013891906110b6565b60405180910390f35b61015b60048036038101906101569190611232565b610614565b005b61017760048036038101906101729190610d77565b610896565b005b610181610951565b60405161018e9190611300565b60405180910390f35b6101b160048036038101906101ac9190610d77565b610977565b005b600181565b6101c06109fd565b6101ca6000610a84565b565b60006060600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561030057838290600052602060002090600202016040518060400160405290816000820180546102659061134a565b80601f01602080910402602001604051908101604052809291908181526020018280546102919061134a565b80156102de5780601f106102b3576101008083540402835291602001916102de565b820191906000526020600020905b8154815290600101906020018083116102c157829003601f168201915b5050505050815260200160018201548152505081526020019060010190610232565b505050509050600081510361032f57600080604051806020016040528060008152509093509350935050610370565b6000816001835161034091906113aa565b81518110610351576103506113de565b5b6020026020010151905060018160000151826020015194509450945050505b9193909250565b6060806000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104a9578382906000526020600020906002020160405180604001604052908160008201805461040e9061134a565b80601f016020809104026020016040519081016040528092919081815260200182805461043a9061134a565b80156104875780601f1061045c57610100808354040283529160200191610487565b820191906000526020600020905b81548152906001019060200180831161046a57829003601f168201915b50505050508152602001600182015481525050815260200190600101906103db565b5050505090506000815190508067ffffffffffffffff8111156104cf576104ce6110db565b5b60405190808252806020026020018201604052801561050257816020015b60608152602001906001900390816104ed5790505b5093508067ffffffffffffffff81111561051f5761051e6110db565b5b60405190808252806020026020018201604052801561054d5781602001602082028036833780820191505090505b50925060005b818110156105e35782818151811061056e5761056d6113de565b5b60200260200101516000015185828151811061058d5761058c6113de565b5b60200260200101819052508281815181106105ab576105aa6113de565b5b6020026020010151602001518482815181106105ca576105c96113de565b5b6020026020010181815250508080600101915050610553565b505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61061c6109fd565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290611459565b60405180910390fd5b60008251116106cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c6906114c5565b60405180910390fd5b42811115610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990611557565b60405180910390fd5b60006107416001848460405160200161072c929190611577565b60405160208183030381529060405286610b48565b905080610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a906115f3565b60405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405280858152602001848152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161081591906117b5565b506020820151816001015550508373ffffffffffffffffffffffffffffffffffffffff16610841610cbf565b73ffffffffffffffffffffffffffffffffffffffff167f3cdce538b6db111fcf97c8cdfc0f65dcd4c7eaeea28abf410f46ad76daed828b8585604051610888929190611577565b60405180910390a350505050565b61089e6109fd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361090d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610904906118d3565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61097f6109fd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109f15760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109e891906110b6565b60405180910390fd5b6109fa81610a84565b50565b610a05610cbf565b73ffffffffffffffffffffffffffffffffffffffff16610a236105eb565b73ffffffffffffffffffffffffffffffffffffffff1614610a8257610a46610cbf565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a7991906110b6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600167ffffffffffffffff168467ffffffffffffffff1614610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b989061193f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611459565b60405180910390fd5b60008084806020019051810190610c2791906119e4565b915091506000825111610c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c66906114c5565b60405180910390fd5b42811115610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca990611557565b60405180910390fd5b6001925050509392505050565b600033905090565b600067ffffffffffffffff82169050919050565b610ce481610cc7565b82525050565b6000602082019050610cff6000830184610cdb565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d4482610d19565b9050919050565b610d5481610d39565b8114610d5f57600080fd5b50565b600081359050610d7181610d4b565b92915050565b600060208284031215610d8d57610d8c610d0f565b5b6000610d9b84828501610d62565b91505092915050565b60008115159050919050565b610db981610da4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610df9578082015181840152602081019050610dde565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e2182610dbf565b610e2b8185610dca565b9350610e3b818560208601610ddb565b610e4481610e05565b840191505092915050565b6000819050919050565b610e6281610e4f565b82525050565b6000606082019050610e7d6000830186610db0565b8181036020830152610e8f8185610e16565b9050610e9e6040830184610e59565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610eee82610dbf565b610ef88185610ed2565b9350610f08818560208601610ddb565b610f1181610e05565b840191505092915050565b6000610f288383610ee3565b905092915050565b6000602082019050919050565b6000610f4882610ea6565b610f528185610eb1565b935083602082028501610f6485610ec2565b8060005b85811015610fa05784840389528151610f818582610f1c565b9450610f8c83610f30565b925060208a01995050600181019050610f68565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610fe781610e4f565b82525050565b6000610ff98383610fde565b60208301905092915050565b6000602082019050919050565b600061101d82610fb2565b6110278185610fbd565b935061103283610fce565b8060005b8381101561106357815161104a8882610fed565b975061105583611005565b925050600181019050611036565b5085935050505092915050565b6000604082019050818103600083015261108a8185610f3d565b9050818103602083015261109e8184611012565b90509392505050565b6110b081610d39565b82525050565b60006020820190506110cb60008301846110a7565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61111382610e05565b810181811067ffffffffffffffff82111715611132576111316110db565b5b80604052505050565b6000611145610d05565b9050611151828261110a565b919050565b600067ffffffffffffffff821115611171576111706110db565b5b61117a82610e05565b9050602081019050919050565b82818337600083830152505050565b60006111a96111a484611156565b61113b565b9050828152602081018484840111156111c5576111c46110d6565b5b6111d0848285611187565b509392505050565b600082601f8301126111ed576111ec6110d1565b5b81356111fd848260208601611196565b91505092915050565b61120f81610e4f565b811461121a57600080fd5b50565b60008135905061122c81611206565b92915050565b60008060006060848603121561124b5761124a610d0f565b5b600061125986828701610d62565b935050602084013567ffffffffffffffff81111561127a57611279610d14565b5b611286868287016111d8565b92505060406112978682870161121d565b9150509250925092565b6000819050919050565b60006112c66112c16112bc84610d19565b6112a1565b610d19565b9050919050565b60006112d8826112ab565b9050919050565b60006112ea826112cd565b9050919050565b6112fa816112df565b82525050565b600060208201905061131560008301846112f1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061136257607f821691505b6020821081036113755761137461131b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b582610e4f565b91506113c083610e4f565b92508282039050818111156113d8576113d761137b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e76616c696420726563697069656e74206164647265737300000000000000600082015250565b6000611443601983610dca565b915061144e8261140d565b602082019050919050565b6000602082019050818103600083015261147281611436565b9050919050565b7f436f75727365206e616d652063616e6e6f7420626520656d7074790000000000600082015250565b60006114af601b83610dca565b91506114ba82611479565b602082019050919050565b600060208201905081810360008301526114de816114a2565b9050919050565b7f497373756520646174652063616e6e6f7420626520696e20746865206675747560008201527f7265000000000000000000000000000000000000000000000000000000000000602082015250565b6000611541602283610dca565b915061154c826114e5565b604082019050919050565b6000602082019050818103600083015261157081611534565b9050919050565b600060408201905081810360008301526115918185610e16565b90506115a06020830184610e59565b9392505050565b7f446174612076616c69646174696f6e206661696c656400000000000000000000600082015250565b60006115dd601683610dca565b91506115e8826115a7565b602082019050919050565b6000602082019050818103600083015261160c816115d0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116757fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611638565b61167f8683611638565b95508019841693508086168417925050509392505050565b60006116b26116ad6116a884610e4f565b6112a1565b610e4f565b9050919050565b6000819050919050565b6116cc83611697565b6116e06116d8826116b9565b848454611645565b825550505050565b600090565b6116f56116e8565b6117008184846116c3565b505050565b5b81811015611724576117196000826116ed565b600181019050611706565b5050565b601f8211156117695761173a81611613565b61174384611628565b81016020851015611752578190505b61176661175e85611628565b830182611705565b50505b505050565b600082821c905092915050565b600061178c6000198460080261176e565b1980831691505092915050565b60006117a5838361177b565b9150826002028217905092915050565b6117be82610dbf565b67ffffffffffffffff8111156117d7576117d66110db565b5b6117e1825461134a565b6117ec828285611728565b600060209050601f83116001811461181f576000841561180d578287015190505b6118178582611799565b86555061187f565b601f19841661182d86611613565b60005b8281101561185557848901518255600182019150602085019450602081019050611830565b86831015611872578489015161186e601f89168261177b565b8355505b6001600288020188555050505b505050505050565b7f496e76616c696420535020696e7374616e636520616464726573730000000000600082015250565b60006118bd601b83610dca565b91506118c882611887565b602082019050919050565b600060208201905081810360008301526118ec816118b0565b9050919050565b7f496e76616c696420736368656d61204944000000000000000000000000000000600082015250565b6000611929601183610dca565b9150611934826118f3565b602082019050919050565b600060208201905081810360008301526119588161191c565b9050919050565b600061197261196d84611156565b61113b565b90508281526020810184848401111561198e5761198d6110d6565b5b611999848285610ddb565b509392505050565b600082601f8301126119b6576119b56110d1565b5b81516119c684826020860161195f565b91505092915050565b6000815190506119de81611206565b92915050565b600080604083850312156119fb576119fa610d0f565b5b600083015167ffffffffffffffff811115611a1957611a18610d14565b5b611a25858286016119a1565b9250506020611a36858286016119cf565b915050925092905056fea2646970667358221220bae6a4f63e0e60c32e240c8c9dd48e739d3fc9b63aee871ed5938c0807c7ea2164736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 639,
        "contract": "contracts/EducationalCredential.sol:EducationalCredential",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 902,
        "contract": "contracts/EducationalCredential.sol:EducationalCredential",
        "label": "spInstance",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISP)495"
      },
      {
        "astId": 911,
        "contract": "contracts/EducationalCredential.sol:EducationalCredential",
        "label": "credentials",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(Credential)899_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Credential)899_storage)dyn_storage": {
        "base": "t_struct(Credential)899_storage",
        "encoding": "dynamic_array",
        "label": "struct EducationalCredential.Credential[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISP)495": {
        "encoding": "inplace",
        "label": "contract ISP",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Credential)899_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EducationalCredential.Credential[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Credential)899_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Credential)899_storage": {
        "encoding": "inplace",
        "label": "struct EducationalCredential.Credential",
        "members": [
          {
            "astId": 896,
            "contract": "contracts/EducationalCredential.sol:EducationalCredential",
            "label": "course",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 898,
            "contract": "contracts/EducationalCredential.sol:EducationalCredential",
            "label": "issueDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}